version: '3.9'

services:
  # Redis container configuration
  redis:
    image: redis:alpine3.19  # Using the Alpine Linux-based Redis image
    container_name: redis
    networks:
      - my_network  # Connect the Redis container to the network defined below
    ports:
      - "6379:6379"  # Expose Redis's default port 6379
    volumes:
      - redis_data:/data  # Persist data to a named volume

  # MongoDB container configuration
  mongo:
    image: mongo:7.0.9  # Using the official MongoDB image
    container_name: mongo
    networks:
      - my_network  # Connect the MongoDB container to the network defined below
    ports:
      - "27017:27017"  # Expose MongoDB's default port 27017
    volumes:
      - mongo_data:/data/db  # Persist data to a named volume

  # Node.js container configuration
  node:
    image: node:22.1.0-alpine3.18  # Using the Node.js 22.1.0 on Alpine Linux image
    container_name: node
    networks:
      - my_network  # Connect the Node.js container to the network defined below
    working_dir: /usr/src/app  # Set the working directory
    volumes:
      - ./app:/usr/src/app  # Mount the host's ./app directory to the container's /usr/src/app directory
    command: sh -c "while :; do sleep 3600; done"  # Keep the container running indefinitely (you can change this as needed)

  # Azure CLI container configuration
  azure-cli:
    image: bitnami/azure-cli:2.60.0  # Using the Bitnami Azure CLI image
    container_name: azure-cli
    networks:
      - my_network  # Connect the Azure CLI container to the network defined below
    command: az interactive  # Start Azure CLI in interactive mode

# Define the network for the containers
networks:
  my_network:
    driver: bridge  # Use the default bridge network

# Define named volumes for persisting data
volumes:
  redis_data:
  mongo_data:
